%---------------------------------------------------------------------------%
%-                                                                         -%
%-                             Bibliography                                -%
%-                                                                         -%
%---------------------------------------------------------------------------%
@inproceedings{li2015sparkbench,
  title={Sparkbench: a comprehensive benchmarking suite for in memory data analytic platform spark},
  author={Li, Min and Tan, Jian and Wang, Yandong and Zhang, Li and Salapura, Valentina},
  booktitle={Proceedings of the 12th ACM international conference on computing frontiers},
  pages={1--8},
  year={2015}
}

@article{geng2014simulation,
  title={Simulation study of interactions between kinesin’s neck linker and motor domain},
  author={Geng, Yi-Zhao and Li, Tie and Ji, Qing and Yan, Shiwei},
  journal={Cellular and molecular bioengineering},
  volume={7},
  number={1},
  pages={99--105},
  year={2014},
  publisher={Springer}
}


@ARTICLE{5710902,  author={D. {Warneke} and O. {Kao}},  journal={IEEE Transactions on Parallel and Distributed Systems},   title={Exploiting Dynamic Resource Allocation for Efficient Parallel Data Processing in the Cloud},   year={2011},  volume={22},  number={6},  pages={985-997},  doi={10.1109/TPDS.2011.65}}

@INPROCEEDINGS{6253482,
  author={B. {Sharma} and R. {Prabhakar} and S. {Lim} and M. T. {Kandemir} and C. R. {Das}},
  booktitle={2012 IEEE Fifth International Conference on Cloud Computing}, 
  title={MROrchestrator: A Fine-Grained Resource Orchestration Framework for MapReduce Clusters}, 
  year={2012},
  volume={},
  number={},
  pages={1-8},
  doi={10.1109/CLOUD.2012.37}}

@inproceedings{vora2011hadoop,
  title={Hadoop-HBase for large-scale data},
  author={Vora, Mehul Nalin},
  booktitle={Proceedings of 2011 International Conference on Computer Science and Network Technology},
  volume={1},
  pages={601--605},
  year={2011},
  organization={IEEE}
}

@article{dimitriou2015retrial,
  title={A retrial queue for modeling fault-tolerant systems with checkpointing and rollback recovery},
  author={Dimitriou, Ioannis},
  journal={Computers \& Industrial Engineering},
  volume={79},
  pages={156--167},
  year={2015},
  publisher={Elsevier}
}

@book{white2012hadoop,
  title={Hadoop: The definitive guide},
  author={White, Tom},
  year={2012},
  publisher={" O'Reilly Media, Inc."}
}

@inproceedings{shvachko2010hadoop,
  title={The hadoop distributed file system},
  author={Shvachko, Konstantin and Kuang, Hairong and Radia, Sanjay and Chansler, Robert},
  booktitle={2010 IEEE 26th symposium on mass storage systems and technologies (MSST)},
  pages={1--10},
  year={2010},
  organization={Ieee}
}

@article{chang2008bigtable,
  title={Bigtable: A distributed storage system for structured data},
  author={Chang, Fay and Dean, Jeffrey and Ghemawat, Sanjay and Hsieh, Wilson C and Wallach, Deborah A and Burrows, Mike and Chandra, Tushar and Fikes, Andrew and Gruber, Robert E},
  journal={ACM Transactions on Computer Systems (TOCS)},
  volume={26},
  number={2},
  pages={1--26},
  year={2008},
  publisher={ACM New York, NY, USA}
}

@article{dean2008mapreduce,
  title={MapReduce: simplified data processing on large clusters},
  author={Dean, Jeffrey and Ghemawat, Sanjay},
  journal={Communications of the ACM},
  volume={51},
  number={1},
  pages={107--113},
  year={2008},
  publisher={ACM New York, NY, USA}
}

@inproceedings{ghemawat2003google,
  title={The Google file system},
  author={Ghemawat, Sanjay and Gobioff, Howard and Leung, Shun-Tak},
  booktitle={Proceedings of the nineteenth ACM symposium on Operating systems principles},
  pages={29--43},
  year={2003}
}

@article{o1993lru,
  title={The LRU-K page replacement algorithm for database disk buffering},
  author={O'neil, Elizabeth J and O'neil, Patrick E and Weikum, Gerhard},
  journal={Acm Sigmod Record},
  volume={22},
  number={2},
  pages={297--306},
  year={1993},
  publisher={ACM New York, NY, USA}
}

@phdthesis{li2018alluxio,
  title={Alluxio: A virtual distributed file system},
  author={Li, Haoyuan},
  year={2018},
  school={UC Berkeley}
}

@inproceedings{li2014tachyon,
  title={Tachyon: Reliable, memory speed storage for cluster computing frameworks},
  author={Li, Haoyuan and Ghodsi, Ali and Zaharia, Matei and Shenker, Scott and Stoica, Ion},
  booktitle={Proceedings of the ACM Symposium on Cloud Computing},
  pages={1--15},
  year={2014}
}

@inproceedings{feeley1995implementing,
  title={Implementing global memory management in a workstation cluster},
  author={Feeley, Michael J and Morgan, William E and Pighin, EP and Karlin, Anna R and Levy, Henry M and Thekkath, Chandramohan A},
  booktitle={Proceedings of the fifteenth ACM symposium on Operating systems principles},
  pages={201--212},
  year={1995}
}

@inproceedings{kemper2011hyper,
  title={HyPer: A hybrid OLTP\&OLAP main memory database system based on virtual memory snapshots},
  author={Kemper, Alfons and Neumann, Thomas},
  booktitle={2011 IEEE 27th International Conference on Data Engineering},
  pages={195--206},
  year={2011},
  organization={IEEE}
}

@article{garcia1992main,
  title={Main memory database systems: An overview},
  author={Garcia-Molina, Hector and Salem, Kenneth},
  journal={IEEE Transactions on knowledge and data engineering},
  volume={4},
  number={6},
  pages={509--516},
  year={1992},
  publisher={IEEE}
}

@article{podlipnig2003survey,
  title={A survey of web cache replacement strategies},
  author={Podlipnig, Stefan and B{\"o}sz{\"o}rmenyi, Laszlo},
  journal={ACM Computing Surveys (CSUR)},
  volume={35},
  number={4},
  pages={374--398},
  year={2003},
  publisher={ACM New York, NY, USA}
}

@inproceedings{vakali2000lru,
  title={LRU-based algorithms for Web cache replacement},
  author={Vakali, AI},
  booktitle={International conference on electronic commerce and web technologies},
  pages={409--418},
  year={2000},
  organization={Springer}
}

@inproceedings{megiddo2003arc,
  title={ARC: A Self-Tuning, Low Overhead Replacement Cache.},
  author={Megiddo, Nimrod and Modha, Dharmendra S},
  booktitle={Fast},
  volume={3},
  number={2003},
  pages={115--130},
  year={2003}
}

% ------------
@inproceedings{sharma2012mrorchestrator,
  title={Mrorchestrator: A fine-grained resource orchestration framework for mapreduce clusters},
  author={Sharma, Bikash and Prabhakar, Ramya and Lim, Seung-Hwan and Kandemir, Mahmut T and Das, Chita R},
  booktitle={2012 IEEE Fifth International Conference on Cloud Computing},
  pages={1--8},
  year={2012},
  organization={IEEE}
}

@inproceedings{polo2010performance,
  title={Performance-driven task co-scheduling for mapreduce environments},
  author={Polo, Jorda and Carrera, David and Becerra, Yolanda and Torres, Jordi and Ayguad{\'e}, Eduard and Steinder, Malgorzata and Whalley, Ian},
  booktitle={2010 IEEE Network Operations and Management Symposium-NOMS 2010},
  pages={373--380},
  year={2010},
  organization={IEEE}
}

@book{zaharia2016architecture,
  title={An architecture for fast and general data processing on large clusters},
  author={Zaharia, Matei},
  year={2016},
  publisher={Association for Computing Machinery and Morgan \& Claypool}
}

@inproceedings{polo2011resource,
  title={Resource-aware adaptive scheduling for mapreduce clusters},
  author={Polo, Jorda and Castillo, Claris and Carrera, David and Becerra, Yolanda and Whalley, Ian and Steinder, Malgorzata and Torres, Jordi and Ayguad{\'e}, Eduard},
  booktitle={ACM/IFIP/USENIX International Conference on Distributed Systems Platforms and Open Distributed Processing},
  pages={187--207},
  year={2011},
  organization={Springer}
}

@article{warneke2011exploiting,
  title={Exploiting dynamic resource allocation for efficient parallel data processing in the cloud},
  author={Warneke, Daniel and Kao, Odej},
  journal={IEEE transactions on parallel and distributed systems},
  volume={22},
  number={6},
  pages={985--997},
  year={2011},
  publisher={IEEE}
}

@article{duan2016selection,
  title={Selection and replacement algorithms for memory performance improvement in Spark},
  author={Duan, Mingxing and Li, Kenli and Tang, Zhuo and Xiao, Guoqing and Li, Keqin},
  journal={Concurrency and Computation: Practice and Experience},
  volume={28},
  number={8},
  pages={2473--2486},
  year={2016},
  publisher={Wiley Online Library}
}

@inproceedings{hindman2011mesos,
  title={Mesos: A platform for fine-grained resource sharing in the data center.},
  author={Hindman, Benjamin and Konwinski, Andy and Zaharia, Matei and Ghodsi, Ali and Joseph, Anthony D and Katz, Randy H and Shenker, Scott and Stoica, Ion},
  booktitle={NSDI},
  volume={11},
  number={2011},
  pages={22--22},
  year={2011}
}

@inproceedings{verma2015large,
  title={Large-scale cluster management at Google with Borg},
  author={Verma, Abhishek and Pedrosa, Luis and Korupolu, Madhukar and Oppenheimer, David and Tune, Eric and Wilkes, John},
  booktitle={Proceedings of the Tenth European Conference on Computer Systems},
  pages={1--17},
  year={2015}
}

@inproceedings{schwarzkopf2013omega,
  title={Omega: flexible, scalable schedulers for large compute clusters},
  author={Schwarzkopf, Malte and Konwinski, Andy and Abd-El-Malek, Michael and Wilkes, John},
  booktitle={Proceedings of the 8th ACM European Conference on Computer Systems},
  pages={351--364},
  year={2013}
}

@article{davidson2013optimizing,
  title={Optimizing shuffle performance in spark},
  author={Davidson, Aaron and Or, Andrew},
  journal={University of California, Berkeley-Department of Electrical Engineering and Computer Sciences, Tech. Rep},
  year={2013}
}


%- ----

@article{bhosale2014review,
  title={A review paper on big data and hadoop},
  author={Bhosale, Harshawardhan S and Gadekar, Devendra P},
  journal={International Journal of Scientific and Research Publications},
  volume={4},
  number={10},
  pages={1--7},
  year={2014},
  publisher={Citeseer}
}

@article{thusoo2009hive,
  title={Hive: a warehousing solution over a map-reduce framework},
  author={Thusoo, Ashish and Sarma, Joydeep Sen and Jain, Namit and Shao, Zheng and Chakka, Prasad and Anthony, Suresh and Liu, Hao and Wyckoff, Pete and Murthy, Raghotham},
  journal={Proceedings of the VLDB Endowment},
  volume={2},
  number={2},
  pages={1626--1629},
  year={2009},
  publisher={VLDB Endowment}
}

@article{meng2016mllib,
  title={Mllib: Machine learning in apache spark},
  author={Meng, Xiangrui and Bradley, Joseph and Yavuz, Burak and Sparks, Evan and Venkataraman, Shivaram and Liu, Davies and Freeman, Jeremy and Tsai, DB and Amde, Manish and Owen, Sean and others},
  journal={The Journal of Machine Learning Research},
  volume={17},
  number={1},
  pages={1235--1241},
  year={2016},
  publisher={JMLR. org}
}

@inproceedings{armbrust2015spark,
  title={Spark sql: Relational data processing in spark},
  author={Armbrust, Michael and Xin, Reynold S and Lian, Cheng and Huai, Yin and Liu, Davies and Bradley, Joseph K and Meng, Xiangrui and Kaftan, Tomer and Franklin, Michael J and Ghodsi, Ali and others},
  booktitle={Proceedings of the 2015 ACM SIGMOD international conference on management of data},
  pages={1383--1394},
  year={2015}
}

@article{zaharia2010spark,
  title={Spark: Cluster computing with working sets.},
  author={Zaharia, Matei and Chowdhury, Mosharaf and Franklin, Michael J and Shenker, Scott and Stoica, Ion and others},
  journal={HotCloud},
  volume={10},
  number={10-10},
  pages={95},
  year={2010}
}

@article{zaharia2016apache,
  title={Apache spark: a unified engine for big data processing},
  author={Zaharia, Matei and Xin, Reynold S and Wendell, Patrick and Das, Tathagata and Armbrust, Michael and Dave, Ankur and Meng, Xiangrui and Rosen, Josh and Venkataraman, Shivaram and Franklin, Michael J and others},
  journal={Communications of the ACM},
  volume={59},
  number={11},
  pages={56--65},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@inproceedings{isard2007dryad,
  title={Dryad: distributed data-parallel programs from sequential building blocks},
  author={Isard, Michael and Budiu, Mihai and Yu, Yuan and Birrell, Andrew and Fetterly, Dennis},
  booktitle={Proceedings of the 2nd ACM SIGOPS/EuroSys European Conference on Computer Systems 2007},
  pages={59--72},
  year={2007}
}

@inproceedings{zhang2014fuxi,
  title={Fuxi: a fault-tolerant resource management and job scheduling system at internet scale},
  author={Zhang, Zhuo and Li, Chao and Tao, Yangyu and Yang, Renyu and Tang, Hong and Xu, Jie},
  booktitle={Proceedings of the VLDB Endowment},
  volume={7},
  number={13},
  pages={1393--1404},
  year={2014},
  organization={VLDB Endowment Inc.}
}

@article{chaiken2008scope,
  title={Scope: easy and efficient parallel processing of massive data sets},
  author={Chaiken, Ronnie and Jenkins, Bob and Larson, Per-{\AA}ke and Ramsey, Bill and Shakib, Darren and Weaver, Simon and Zhou, Jingren},
  journal={Proceedings of the VLDB Endowment},
  volume={1},
  number={2},
  pages={1265--1276},
  year={2008},
  publisher={VLDB Endowment}
}

@inproceedings{ananthanarayanan2012pacman,
  title={Pacman: Coordinated memory caching for parallel jobs},
  author={Ananthanarayanan, Ganesh and Ghodsi, Ali and Warfield, Andrew and Borthakur, Dhruba and Kandula, Srikanth and Shenker, Scott and Stoica, Ion},
  booktitle={9th $\{$USENIX$\}$ Symposium on Networked Systems Design and Implementation ($\{$NSDI$\}$ 12)},
  pages={267--280},
  year={2012}
}

% ---

@article{meng2016mllib,
  title={Mllib: Machine learning in apache spark},
  author={Meng, Xiangrui and Bradley, Joseph and Yavuz, Burak and Sparks, Evan and Venkataraman, Shivaram and Liu, Davies and Freeman, Jeremy and Tsai, DB and Amde, Manish and Owen, Sean and others},
  journal={The Journal of Machine Learning Research},
  volume={17},
  number={1},
  pages={1235--1241},
  year={2016},
  publisher={JMLR. org}
}

@article{zaharia2016apache,
  title={Apache spark: a unified engine for big data processing},
  author={Zaharia, Matei and Xin, Reynold S and Wendell, Patrick and Das, Tathagata and Armbrust, Michael and Dave, Ankur and Meng, Xiangrui and Rosen, Josh and Venkataraman, Shivaram and Franklin, Michael J and others},
  journal={Communications of the ACM},
  volume={59},
  number={11},
  pages={56--65},
  year={2016},
  publisher={ACM New York, NY, USA}
}


% --- 

@inproceedings{choi2015early,
  title={Early experience with optimizing I/O performance using high-performance SSDs for in-memory cluster computing},
  author={Choi, I Stephen and Yang, Weiqing and Kee, Yang-Suk},
  booktitle={2015 IEEE International Conference on Big Data (Big Data)},
  pages={1073--1083}, 
  year={2015},
  organization={IEEE}
}

@inproceedings{cheng2020ops,
  title={OPS: Optimized Shuffle Management System for Apache Spark},
  author={Cheng, Yuchen and Wu, Chunghsuan and Liu, Yanqiang and Ren, Rui and Xu, Hong and Yang, Bin and Qi, Zhengwei},
  booktitle={49th International Conference on Parallel Processing-ICPP},
  pages={1--11},
  year={2020}
}

@article{kim2017sparkle,
  title={Sparkle: Optimizing spark for large memory machines and analytics},
  author={Kim, Mijung and Li, Jun and Volos, Haris and Marwah, Manish and Ulanov, Alexander and Keeton, Kimberly and Tucek, Joseph and Cherkasova, Lucy and Xu, Le and Fernando, Pradeep},
  journal={arXiv preprint arXiv:1708.05746},
  year={2017}
}

@inproceedings{li2015performance,
  title={Performance comparison of hive, impala and spark sql},
  author={Li, Xiaopeng and Zhou, Wenli},
  booktitle={2015 7th International Conference on Intelligent Human-Machine Systems and Cybernetics},
  volume={1},
  pages={418--423},
  year={2015},
  organization={IEEE}
}

@article{meng2016mllib,
  title={Mllib: Machine learning in apache spark},
  author={Meng, Xiangrui and Bradley, Joseph and Yavuz, Burak and Sparks, Evan and Venkataraman, Shivaram and Liu, Davies and Freeman, Jeremy and Tsai, DB and Amde, Manish and Owen, Sean and others},
  journal={The Journal of Machine Learning Research},
  volume={17},
  number={1},
  pages={1235--1241},
  year={2016},
  publisher={JMLR. org}
}

@article{ivanov2015evaluating,
  title={Evaluating hive and spark SQL with BigBench},
  author={Ivanov, Todor and Beer, Max-Georg},
  journal={arXiv preprint arXiv:1512.08417},
  year={2015}
}

@article{baldacci2018cost,
  title={A cost model for Spark SQL},
  author={Baldacci, Lorenzo and Golfarelli, Matteo},
  journal={IEEE Transactions on Knowledge and Data Engineering},
  volume={31},
  number={5},
  pages={819--832},
  year={2018},
  publisher={IEEE}
}

@book{karau2015learning,
  title={Learning spark: lightning-fast big data analysis},
  author={Karau, Holden and Konwinski, Andy and Wendell, Patrick and Zaharia, Matei},
  year={2015},
  publisher={" O'Reilly Media, Inc."}
}

@inproceedings{han2015spark,
  title={Spark: A big data processing platform based on memory computing},
  author={Han, Zhijie and Zhang, Yujie},
  booktitle={2015 Seventh International Symposium on Parallel Architectures, Algorithms and Programming (PAAP)},
  pages={172--176},
  year={2015},
  organization={IEEE}
}

% ---
@article{young2002line,
  title={On-line file caching},
  author={Young, Neal E},
  journal={Algorithmica},
  volume={33},
  number={3},
  pages={371--383},
  year={2002},
  publisher={Springer}
}

@article{swain2011awrp,
  title={AWRP: adaptive weight ranking policy for improving cache performance},
  author={Swain, Debabala and Paikaray, Bijay and Swain, Debabrata},
  journal={arXiv preprint arXiv:1107.4851},
  year={2011}
}

@article{fang2014partition,
  title={Partition-based cache replacement to manage shared l2 caches},
  author={FANG, Juan and WANG, Jing and LI, Chengyan and YAO, Zhicheng and KE, Weimao},
  journal={Chinese Journal of Electronics},
  volume={23},
  number={3},
  pages={464--467},
  year={2014}
}

@inproceedings{byan2012mercury,
  title={Mercury: Host-side flash caching for the data center},
  author={Byan, Steve and Lentini, James and Madan, Anshul and Pabon, Luis and Condict, Michael and Kimmel, Jeff and Kleiman, Steve and Small, Christopher and Storer, Mark},
  booktitle={2012 IEEE 28th Symposium on Mass Storage Systems and Technologies (MSST)},
  pages={1--12},
  year={2012},
  organization={IEEE}
}

@inproceedings{ongaro2011fast,
  title={Fast crash recovery in RAMCloud},
  author={Ongaro, Diego and Rumble, Stephen M and Stutsman, Ryan and Ousterhout, John and Rosenblum, Mendel},
  booktitle={Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles},
  pages={29--41},
  year={2011}
}

@article{stone1971parallel,
  title={Parallel processing with the perfect shuffle},
  author={Stone, Harold S},
  journal={IEEE transactions on computers},
  volume={100},
  number={2},
  pages={153--161},
  year={1971},
  publisher={IEEE}
}

@inproceedings{furukawa2001efficient,
  title={An efficient scheme for proving a shuffle},
  author={Furukawa, Jun and Sako, Kazue},
  booktitle={Annual International Cryptology Conference},
  pages={368--387},
  year={2001},
  organization={Springer}
}

@inproceedings{liu2017optimizing,
  title={Optimizing shuffle in wide-area data analytics},
  author={Liu, Shuhao and Wang, Hao and Li, Baochun},
  booktitle={2017 IEEE 37th International Conference on Distributed Computing Systems (ICDCS)},
  pages={560--571},
  year={2017},
  organization={IEEE}
}

@inproceedings{lu2014accelerating,
  title={Accelerating spark with rdma for big data processing: Early experiences},
  author={Lu, Xiaoyi and Rahman, Md Wasi Ur and Islam, Nusrat and Shankar, Dipti and Panda, Dhabaleswar K},
  booktitle={2014 IEEE 22nd Annual Symposium on High-Performance Interconnects},
  pages={9--16},
  year={2014},
  organization={IEEE}
}

@article{gopalani2015comparing,
  title={Comparing apache spark and map reduce with performance analysis using k-means},
  author={Gopalani, Satish and Arora, Rohan},
  journal={International journal of computer applications},
  volume={113},
  number={1},
  year={2015},
  publisher={Citeseer}
}

% --- 
@inproceedings{zaharia2012resilient,
  title={Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing},
  author={Zaharia, Matei and Chowdhury, Mosharaf and Das, Tathagata and Dave, Ankur and Ma, Justin and McCauly, Murphy and Franklin, Michael J and Shenker, Scott and Stoica, Ion},
  booktitle={9th $\{$USENIX$\}$ Symposium on Networked Systems Design and Implementation ($\{$NSDI$\}$ 12)},
  pages={15--28},
  year={2012}
}

% ---
@phdthesis{冯琳0集群计算引擎,
  title={集群计算引擎Spark中的内存优化研究与实现},
  author={冯琳},
  school={清华大学},
 abstract={在迭代之间使用内存做数据传输的并行计算框架是当前的一个研究热点.与传统的基于硬盘和网络的计算方式相比,使用内存可以减少数据传输的时间.对于数据密集类型的任务,可以将运行时间提升十几倍.在新一代框架快速发展的同时,如何充分利用相对仍然紧缺的内存资源,保证任务的运行效率,成为一个亟待解决的问题. 本文基于集群计算引擎Spark,研究了并行计算集群对于内存的使用行为.通过对内存行为进行建模与分析,对内存的使用进行了决策自动化以及替换策略优化.提高了任务在资源有限情况下的运行效率,以及在不同集群环境下任务效率的稳定性.本文的贡献主要有: 通过对代码的语义进行分析,实现了内存策略的自动化.即调度器可以自动识别出价值的数据集(RDD)放入缓存,避免缓存存污染的同时,也减轻了程序员的编程负担. 在对代码语义分析,获得任务详细信息的基础上,对内存使用的替换策略进行了优化.主要包括RDD大小和权重的计算,操作顺序的优化重排,使用寄存器分配模型加权重信息形成新的替换算法,代替原有的LRU算法以及多级缓存模型的智能化.最后对内存在异构集群群上的行为也进行了初步的分析. 最后通过不同的实验,验证了优化后的方案可以提高任务对不同集群环境的适应性,并且在在内存资源相对有限的情况下使任务运行效率更高,使系统的实用性整体增强,对于其他并行系统中的内存使用也有实际的参考价值.},
}

@article{0Leveraging,
  title={Leveraging High-Performance In-Memory Key-Value Data Stores to Accelerate Data Intensive Tasks},
  author={ Khouzami, N.  and  Polo, J.  and  Carrera, D. },
}

@article{刘莉2014异构集群下的任务调度算法研究,
  title={异构集群下的任务调度算法研究},
  author={刘莉 and 姜明华},
  journal={计算机应用研究},
  number={01},
  pages={80-84},
  year={2014},
}

@article{杨志伟2016异构,
  title={异构Spark集群下自适应任务调度策略},
  author={杨志伟 and 郑烇 and 王嵩 and 杨坚 and 周乐乐},
  journal={计算机工程},
  volume={42},
  number={001},
  pages={31-35},
  year={2016},
}

@phdthesis{孟红涛0Spark,
  title={Spark内存管理与缓存策略研究},
  author={孟红涛},
  school={国防科学技术大学},
 abstract={科技的发展和时代的进步把我们带入了大数据时代。大数据时代下,如何把海量的数据转化为巨大的价值是大数据处理需要解决的问题。然而,传统的单机环境难以存储和处理海量的数据,出现了很多分布式存储和计算系统。分布式系统能够管理和协调大量普通机器,对外表现为一台机器。在分布式系统内一台机器上存储和处理一部分数据,所有的机器协调统一,从而完成整个存储和计算的任务。由于内存访问速度是纳秒级而磁盘的访问速度是微秒级,所以使用内存加速分布式存储和计算是当前大数据存储和处理的研究热点。Spark就是一种基于Map-Reduce编程模型的Spark分布式内存计算系统。Spark提出一种新的抽象RDD,能够在数据处理并行化的同时提供容错。Spark把Map-Reduce过程中的中间数据存储在内存中、把Spark应用中重要的RDD缓存在内存中,从而提高Spark系统的性能和内存利用率。本文基于分布式内存计算系统Spark,研究了Spark系统的实现原理、运行机制和资源管理,研究并测试了Spark系统的内存管理和使用特点,设计并实现了两种Spark系统的缓存策略——分布式权值缓存策略DWRP和二次执行缓存策略DERP。本文的主要贡献有:(1)研究分析了分布式内存计算系统Spark的实现原理、运行机制和资源管理方式。研究了Spark系统中内存的管理和使用方式。使用BigDataBench大数据标准测试集,通过实验测试和数据分析,重点研究了Spark系统中Shuffle Memory,Storage Memory的管理和使用特点。测试并分析了Spark系统中两种Shuffle方式的特点。(2)基于Spark1.4.0设计并实现了一种Spark系统中的缓存策略——分布式权值缓存策略DWRP。DWRP策略的主要思想是:首先利用RDD的分布式特征,筛选一部分RDD的分区,然后再利用RDD分区的大小,访问频率和缓存时间等特征计算筛选出来的RDD分区的权值,最后淘汰其中权值最小的RDD分区。DWRP策略适合运行多种Spark应用的Spark集群。(3)基于Spark1.4.0设计并实现了一种Spark系统中的缓存策略——二次执行缓存策略DERP。DERP策略的主要思路是:取原始数据的一小部分数据作为输入数据,第一次执行时得到该Spark应用的DAG图和应用特征。第二次执行为正式执行,使用所有的原始数据执行该Spark应用。在第二次正式执行时利用该DAG图和该应用的的信息主动淘汰某些无用的RDD分区,存储更有价值的RDD分区。DERP策略适合多次运行单一Spark应用的Spark集群。通过以上对分布式内存计算系统Spark的研究,我们的工作为进一步提高Spark系统的性能提供了有力的技术支撑,为进一步优化其他分布式系统的内存利用率提供了思路。},
}

@misc{范天文2020基于内存计算框架,
  title={基于内存计算框架Spark的性能优化和参数配置方法},
  author={范天文 and 龙昭华 and 沈励芝 and 余快 and 崔永明},
  year={2020},
 abstract={本发明公开了一种基于内存计算框架Spark的性能优化和参数配置方法,通过先确定Spark应用程序类型以及影响不同类型的Spark性能参数,随机组合配置参数得到训练集,将训练集通过LightGBM算法建立配置参数模型,通过贝叶斯优化算法搜索LightGBM算法的超参数最优组合,进一步使得配置模型选择出最优配置参数.本发明不要求用户理解Spark运行机制,参数意义作业和取值范围,以及应用程序类型特点和输入集的情况下,能为用户找到运行在不同集群环境下不同类型应用程序的最优配置参数,较之前的参数配置方法更加简单明了方便.},
}

@phdthesis{张伟0Spark,
  title={Spark计算引擎的内存优化技术研究},
  author={张伟},
  school={哈尔滨工程大学},
 abstract={随着互联网的广泛普及,物联网的兴起与通信技术的快速发展,用户产生的数据呈指数上涨态势,传统的单台高性能服务器已不能满足对超大规模数据进行处理.因此,以集群为单位的大数据分布式系统应运而生,其中Hadoop与Spark为目前最流行的分布式计算框架,与采用基于磁盘和网格计算的Hadoop相比,基于内存计算的Spark计算速度比Hadoop快一个数量级以上,可显著减少数据传输和运算时间.在Spark快速发展的同时,如何充分利用其内存资源,提高内存使用效率,值得进行深入研究.论文对Spark内存管理进行了深入研究.针对Spark框架原理和源代码进行深入研究,为了能判断内存管理方案的优劣,需要获取应用的具体执行情况,因此设计了一个性能分析系统,分别包含了Spark源码插桩层,数据整理层和数据可视化层.根据Spark1.6及之后版本拥有两种不同的内存管理方案,分析了新旧内存管理方案的具体实现方式,通过理论推导得出新内存管理方案存在在内存较小的情况下应用较易运行失败的不足,并通过实验验证了新内存管理方案在该方面存在不足;针对新内存管理方案该方面存在的不足进行了改进,使改进后的内存管理方案能在较小内存时成功运行.在分析新旧内存管理方案原理时,发现两种方案的核心都是使用静态配置算法实现.由于静态配置算法并不能根据应用运行过程中两种内存需求比例的不断变化而动态调整配置比例大小.本文提出了一种基于溢出历史的自适应内存动态配置算法AMDAAH.该算法能够根据应用在运行过程中需要的不同内存类型的相对大小动态调整各内存类型比例关系,从而提高内存的使用效率;并将其分别与先来先服务算法,静态配置算法进行性能比较,实验验证了AMDAAH算法能够在SparkPi和PageRank两种不同类型的应用中都能表现出较好的内存使用效率,整体性能最优.},
}

@article{卞琛2017并行计算框架,
  title={并行计算框架Spark的自适应缓存管理策略},
  author={卞琛 and 于炯 and 英昌甜 and 修位蓉},
  journal={电子学报},
  volume={45},
  number={002},
  pages={278-284},
  year={2017},
 abstract={并行计算框架Spark缺乏有效缓存选择机制,不能自动识别并缓存高重用度数据;缓存替换算法采用LRU,度量方法不够细致,影响任务的执行效率.本文提出一种Spark框架自适应缓存管理策略(Self-Adaptive Cache Management,SACM),包括缓存自动选择算法(Selection),并行缓存清理算法(Parallel Cache Cleanup,PCC)和权重缓存替换算法(Lowest Weight Replacement,LWR).其中,缓存自动选择算法通过分析任务的DAG(Directed Acyclic Graph)结构,识别重用的RDD并自动缓存.并行缓存清理算法异步清理无价值的RDD,提高集群内存利用率.权重替换算法通过权重值判定替换目标,避免重新计算复杂RDD产生的任务延时,保障资源瓶颈下的计算效率.实验表明:我们的策略提高了Spark的任务执行效率,并使内存资源得到有效利用.},
}

@article{杨志伟2016异构,
  title={异构Spark集群下自适应任务调度策略},
  author={杨志伟 and 郑全 and 王嵩 and 杨坚 and 周乐乐},
  journal={计算机工程},
  volume={42},
  number={001},
  pages={31-35},
  year={2016},
 abstract={Spark是一种基于内存的类Hadoop MapReduce高效大数据处理平台,但其默认的任务调度策略在异构Spark集群下未考虑到节点的能力差异,降低了系统性能.为此,提出一种基于异构Spark集群的自适应任务调度策略.该策略通过监测节点的负载及资源利用率,分析监测得到的参数,自适应动态调整节点任务分配权值.实验结果表明,在异构节点情况下,该策略在作业完成时间,节点工作状态及资源利用率方面的性能均优于默认的任务调度策略.},
}

@article{陈康2016Spark,
  title={Spark计算引擎的数据对象缓存优化研究},
  author={陈康 and 王彬 and 冯琳},
  journal={中兴通讯技术},
  volume={22},
  number={02},
  pages={23-27},
  year={2016},
 abstract={研究了Spark并行计算集群对于内存的使用行为,认为其主要工作是通过对内存行为进行建模与分析,并对内存的使用进行决策自动化,使调度器自动识别出有价值的弹性分布式数据集(RDD)并放入缓存。另外,也对缓存替换策略进行优化,代替了原有的近期最少使用(LRU)算法。通过改进缓存方法,提高了任务在资源有限情况下的运行效率,以及在不同集群环境下任务效率的稳定性。},
}

@article{廖旺坚2018Spark,
  title={Spark并行计算框架的内存优化},
  author={廖旺坚 and 黄永峰 and 包从开},
  journal={计算机工程与科学},
  volume={040},
  number={004},
  pages={587-593},
  year={2018},
 abstract={以Spark为代表的集群并行计算框架在大数据,云计算浪潮中广泛应用,其运行性能优化是应用的关键.为提高运行性能,分析了Spark框架执行流程,内存管理机制,结合Spark和JVM两个层面内存管理的特点,提出3条优化策略:(1)通过序列化和压缩方式减少缓存数据大小,使得GC消耗降低,提升性能;(2)在一定范围内减少运行内存大小,用重算代替缓存,可以提升性能;(3)配置适当的JVM新生代和老生代的比例,Spark计算与缓存空间比例等内存分配参数,能够较大程度地提升性能.实验结果表明,序列化和压缩能够减少缓存占用空间42%;提交运行内存由1 000MB减少到800MB时,性能增加21%;优化内存配比,性能比默认参数有10%~30%的提升.},
}

@misc{李斌0基于,
  title={基于Spark和并行内存计算的流程引擎实现方法及系统},
  author={李斌 and 李艳丽},
}

@article{廖湖声0Spark,
  title={Spark性能优化技术研究综述},
  author={廖湖声 and 黄珊珊 and 徐俊刚 and 刘仁峰},
  journal={Computer Science},
  volume={45},
  number={7},
 abstract={近年来,随着大数据时代的到来,大数据处理平台发展迅速,产生了诸如Hadoop,Spark,Storm等优秀的大数据处理平台,其中Spark最为突出。随着Spark在国内外的广泛应用,其许多性能问题尚待解决。由于Spark底层 的执行机制极为复杂,用户很难找到其性能瓶颈,更不要说进一步的优化。针对以上问题, 从开发原则优化、内存优化、配置参数优化、调度优化、Shuffle过程优化5个方面对 目前国内外的Spark优化技术进行总结和分析。最后,总结了目前Spark优化技术新的核心问题,并提出了未来的主要研究方向。},
}

@phdthesis{李源0Spark,
  title={Spark资源使用及分配策略的研究与优化},
  author={李源},
  school={华中科技大学},
 abstract={随着"互联网+"时代的来临,大数据技术日趋成为现今各行各业的热门话题.基于内存的分布式计算框架Spark具有执行速度快,通用性强等诸多优异特性,得到了广泛的关注与应用.然而,Spark默认的资源分配策略是一种静态的方法,无法满足不同应用的需求;而无论是在线下生产环境中需要与他人共享集群资源,还是在云平台中为了高效使用租赁服务降低成本,都需要用户在满足应用程序需求的前提下,优化Spark集群资源的申请与使用.如何最大化利用Spark平台的优异特性开发应用程序,对其进行性能优化,如何合理地进行Spark集群资源分配,都是用户面临的挑战.在研究Spark运行机制及资源管理方法的基础上,提出了两种基于Spark平台的资源分配优化方法:(a)优化RDD的持久化策略,(b)优化应用的并行度,并选取BigDataBench作为测试负载,针对在搜索引擎,社交网络与电子商务等热门互联网服务中得到广泛应用的ALS,KMeans,PageRank三种典型迭代应用进行性能优化.优化后的Spark迭代应用在执行过程中对于内存的需求量往往会迅速达到一个稳定值,根据迭代应用这一资源使用特征,对其资源使用情况建模,设计并实现了一种资源动态反馈调度策略RDFS(Resource Dynamic Feedback Scheduling)预测迭代应用资源使用量,进而优化集群资源分配.分析Spark内存使用情况,探究在内存无法满足需求时,不同RDD持久化级别对于Spark应用程序的影响,进而优化Spark应用程序内存使用,提高其执行效率.测试结果表明,优化后的三种Spark典型迭代应用的执行时间大幅度缩短,执行效率显著提升;RDFS策略能够在保证迭代应用正常而高效运行的同时,释放冗余系统资源,提高系统整体资源利用率,缩短多应用并发执行所需时间;在内存不足时,没有一种确定的持久化方法能够保证应用的执行效率达到最优,选择合适的持久化级别,在某些情况下能够将任务的执行效率提升70%以上.},
}

@phdthesis{罗妮0基于机器学习的内存计算优化关键技术研究,
  title={基于机器学习的内存计算优化关键技术研究},
  author={罗妮},
  school={中国科学院大学(中国科学院深圳先进技术研究院)},
 abstract={近几年,由于相比于传统的磁盘计算框架运行迭代和交互式应用程序快数十倍,以Spark为代表的内存集群计算框架获得大量关注,发展迅速.但是由于内存集群计算框架是一种新的计算框架,配置参数对其性能的影响仍未知,因此尚未有研究解决从有优化参数角度优化Spark集群的性能.本研究首先研究配置参数对Spark性能的影响,发现由配置参数引起的最优性能是最差性能的20.7倍,说明配置Spark程序对程序的性能非常重要.然而,传统的手动调参方法既困难也很耗时,远未达到最佳性能.为解决这一问题,本论文提出一种自动优化Spark配置参数的方法(ACS).ACS首先使用随机森林算法构造性能模型,模型以Spark配置参数为输入,程序执行时间为输出;然后ACS使用遗传算法结合性能模型搜索最优配置参数.使用六个Spark程序,每个程序搭配五个输入集进行实验,实验结果表明,ACS相比于默认配置参数的平均加速比是2.2,最高加速比达8.2,并且加速比随着输入集的增大而增大.},
}



%---------------------------------------------------------------------------%
